.TH "RTPDuplex" 3 "9 Jun 2003" "ccRTP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RTPDuplex \- A peer associated RTP socket pair for physically connected peer hosts. RTP peer host over UDP. 
.SH SYNOPSIS
.br
.PP
\fC#include <cc++/rtp.h>\fP
.PP
Inherits \fBRTPDataQueue\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBRTPDuplex\fP (const InetAddress &bind, tpport_t local, tpport_t remote)"
.br
.ti -1c
.RI "UDPTransmit::Error \fBconnect\fP (const InetHostAddress &host, tpport_t port=0)"
.br
.in -1c
.SS "Protected Methods"

.in +1c
.ti -1c
.RI "bool \fBisPendingData\fP (\fBmicrotimeout_t\fP timeout)"
.br
.ti -1c
.RI "size_t \fBsendData\fP (const unsigned char *const buffer, size_t len)"
.br
.ti -1c
.RI "size_t \fBrecvData\fP (unsigned char *buffer, size_t len, InetHostAddress &na, tpport_t &tp)"
.br
.ti -1c
.RI "void \fBsetDataPeer\fP (const InetAddress &, tpport_t)"
.br
.ti -1c
.RI "void \fBsetControlPeer\fP (const InetAddress &, tpport_t)"
.br
.ti -1c
.RI "size_t \fBgetNextDataPacketSize\fP () const"
.br
.ti -1c
.RI "\fBSyncSource\fP & \fBgetPeer\fP ()"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
A peer associated RTP socket pair for physically connected peer hosts. RTP peer host over UDP.
.PP
This has no RTCP and assumes the receiver is connected to a known transmitter, hence no 'foreign' packets will arrive.
.PP
\fBAuthor: \fP
.in +1c
David Sugar 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "RTPDuplex::RTPDuplex (const InetAddress & bind, tpport_t local, tpport_t remote)"
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIbind\fP\fP
network address this socket is to be bound 
.TP
\fB\fIlocal\fP\fP
transport port this socket is to be bound 
.TP
\fB\fIremote\fP\fP
peer transpor port 
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "UDPTransmit::Error RTPDuplex::connect (const InetHostAddress & host, tpport_t port = 0)"
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIhost\fP\fP
peer address 
.TP
\fB\fIport\fP\fP
peer port. If not specified, the same as the local is used 
.PP
\fBReturns: \fP
.in +1c
socket status 
.SS "\fBSyncSource\fP& RTPDuplex::getPeer ()\fC [protected]\fP"
.PP
\fBReturns: \fP
.in +1c
the associated peer information 
.SS "bool RTPDuplex::isPendingData (\fBmicrotimeout_t\fP timeout)\fC [inline, protected, virtual]\fP"
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fItimeout\fP\fP
how much time to wait for new data 
.PP
\fBReturns: \fP
.in +1c
if there is some new data 
.PP
Implements \fBRTPDataQueue\fP.
.SS "size_t RTPDuplex::recvData (unsigned char * buffer, size_t len, InetHostAddress & na, tpport_t & tp)\fC [inline, protected, virtual]\fP"
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIbuffer\fP\fP
where to store the retrieved data 
.TP
\fB\fIlen\fP\fP
how many octets to read 
.TP
\fB\fIna\fP\fP
Source network address. 
.TP
\fB\fItp\fP\fP
Source transport port. 
.PP
\fBReturns: \fP
.in +1c
number of octets read 
.PP
Implements \fBIncomingDataQueue\fP.
.SS "size_t RTPDuplex::sendData (const unsigned char *const buffer, size_t len)\fC [inline, protected, virtual]\fP"
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIbuffer\fP\fP
pointer to data to be written 
.TP
\fB\fIlen\fP\fP
how many octets to write 
.PP
\fBReturns: \fP
.in +1c
number of octets written 
.PP
Implements \fBOutgoingDataQueue\fP.
.SS "void RTPDuplex::setControlPeer (const InetAddress &, tpport_t)\fC [inline, protected, virtual]\fP"
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fI-\fP\fP
peer host network address. 
.TP
\fB\fI-\fP\fP
peer host RTCP transport port. 
.PP
Implements \fBOutgoingDataQueue\fP.
.SS "void RTPDuplex::setDataPeer (const InetAddress &, tpport_t)\fC [inline, protected, virtual]\fP"
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fI-\fP\fP
peer host network address. 
.TP
\fB\fI-\fP\fP
peer host RTP data transport port. 
.PP
Implements \fBOutgoingDataQueue\fP.

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for ccRTP from the source code.
