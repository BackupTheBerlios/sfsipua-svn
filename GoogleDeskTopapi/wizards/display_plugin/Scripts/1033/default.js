// This is the entry point for the wizard code generator (called by VS.net). 
// From here we call the various functions below.
// Most of the code in the functions below was generated by the custom appwizard
// code generator of VS.net.
function OnFinish(selProj, selObj) {
  try {
    // set up our symbols and generate the required GUIDs
    var strProjectPath = wizard.FindSymbol("PROJECT_PATH");
    var strProjectName = wizard.FindSymbol("PROJECT_NAME");
    var numPropertyPages = wizard.FindSymbol("NUM_PROPERTY_PAGES");
    var itemLayout = wizard.FindSymbol("ITEM_LAYOUT");
    var customDetailsView = wizard.FindSymbol("CUSTOM_DETAILS_VIEW");
    wizard.AddSymbol("USE_PROPERTY_PAGE1", (numPropertyPages > 0) ? true : false);
    wizard.AddSymbol("USE_PROPERTY_PAGE2", (numPropertyPages > 1) ? true : false);
    wizard.AddSymbol("USE_PROPERTY_PAGE3", (numPropertyPages > 2) ? true : false);
    wizard.AddSymbol("ITEM_LAYOUT_NEWS", (itemLayout == "News") ? true : false);
    wizard.AddSymbol("ITEM_LAYOUT_EMAIL", (itemLayout == "Email") ? true : false);
    wizard.AddSymbol("ITEM_LAYOUT_NOWRAP", (itemLayout == "NoWrap") ? true : false);
    wizard.AddSymbol("GUID_PLUGIN_CLASS", wizard.FormatGuid(wizard.CreateGuid(), 0));
    wizard.AddSymbol("GUID_PLUGIN_INTERFACE", wizard.FormatGuid(wizard.CreateGuid(), 0));
    wizard.AddSymbol("GUID_DETAILS_VIEW_CLASS", wizard.FormatGuid(wizard.CreateGuid(), 0));
    wizard.AddSymbol("GUID_DETAILS_VIEW_INTERFACE", wizard.FormatGuid(wizard.CreateGuid(), 0));
    wizard.AddSymbol("GUID_TYPE_LIBRARY", wizard.FormatGuid(wizard.CreateGuid(), 0));
    wizard.AddSymbol("GUID_PROPERTY_PAGE1", wizard.FormatGuid(wizard.CreateGuid(), 0));
    wizard.AddSymbol("GUID_PROPERTY_PAGE2", wizard.FormatGuid(wizard.CreateGuid(), 0));
    wizard.AddSymbol("GUID_PROPERTY_PAGE3", wizard.FormatGuid(wizard.CreateGuid(), 0));
    
    // remove all spaces in the project name silently.
    strProjectName = strProjectName.replace(/\s/g, "");
    wizard.AddSymbol("PROJECT_NAME", strProjectName);

    // find where our SDK is installed. Our wizard files are 3 levels 
    // inside the SDK install dir
    var sdkInstallDir = wizard.FindSymbol("ABSOLUTE_PATH");
    sdkInstallDir = sdkInstallDir.substr(0, sdkInstallDir.lastIndexOf("\\"));
    sdkInstallDir = sdkInstallDir.substr(0, sdkInstallDir.lastIndexOf("\\"));
    sdkInstallDir = sdkInstallDir.substr(0, sdkInstallDir.lastIndexOf("\\"));

    // create the project. inf and various other files.
    selProj = GDWiz_CreateCustomProject(strProjectName, strProjectPath,
      sdkInstallDir);
    GDWiz_AddConfig(selProj, strProjectName, sdkInstallDir);
    GDWiz_AddFilters(selProj);

    var InfFile = GDWiz_CreateCustomInfFile();
    GDWiz_AddFilesToCustomProj(selProj, strProjectName, strProjectPath, InfFile,
      (numPropertyPages > 0), (numPropertyPages > 1), (numPropertyPages > 2), 
      customDetailsView);
    GDWiz_PchSettings(selProj);
    InfFile.Delete();

    selProj.Object.Save();
  } catch(e) {
    if (e.description.length != 0)
      SetErrorInfo(e);
    return e.number
  }
}

// Creates the new project based on the default.vcproj template and add the
// various build targets
function GDWiz_CreateCustomProject(strProjectName, strProjectPath, sdkInstallDir) {
  try {
    var strProjTemplatePath = wizard.FindSymbol('PROJECT_TEMPLATE_PATH');
    var strProjTemplate = '';
    strProjTemplate = strProjTemplatePath + '\\default.vcproj';

    var Solution = dte.Solution;
    var strSolutionName = "";
    if (wizard.FindSymbol("CLOSE_SOLUTION")) {
      Solution.Close();
      strSolutionName = wizard.FindSymbol("VS_SOLUTION_NAME");
      if (strSolutionName.length) {
        var strSolutionPath = strProjectPath.substr(0,
          strProjectPath.length - strProjectName.length);
        Solution.Create(strSolutionPath, strSolutionName);
      }
    }

    var strProjectNameWithExt = '';
    strProjectNameWithExt = strProjectName + '.vcproj';

    var oTarget = wizard.FindSymbol("TARGET");
    var pluginPrj;
    if (wizard.FindSymbol("WIZARD_TYPE") == vsWizardAddSubProject) { 
      var prjItem = oTarget.AddFromTemplate(strProjTemplate, 
        strProjectNameWithExt);
      pluginPrj = prjItem.SubProject;
    } else {
      pluginPrj = oTarget.AddFromTemplate(strProjTemplate, strProjectPath, 
        strProjectNameWithExt);
    }
    var commonPrjPathNameWithExt = sdkInstallDir + 
      "\\api\\samples\\common\\GoogleDesktopComponentCommon.vcproj";
    var commonPrj = oTarget.AddFromFile(commonPrjPathNameWithExt);
    oTarget.SolutionBuild.BuildDependencies.Item(
      pluginPrj.UniqueName).AddProject(commonPrj.UniqueName);

    return pluginPrj;
  } catch(e) {
    throw e;
  }
}

// Adds the various folders and filters for those folders to the project
function GDWiz_AddFilters(proj) {
  try {
    // Add the folders to your project
    var group = proj.Object.AddFilter('Source Files');
    group.Filter = 'cpp;c;cxx;def;odl;idl;hpj;bat;asm;asmx';
    group = proj.Object.AddFilter('Header Files');
    group.Filter = 'h;hpp;hxx;hm;inl;inc;xsd';
    group = proj.Object.AddFilter('Resource Files');
    group.Filter = 'rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx';
  } catch(e) {
    throw e;
  }
}

// Adds the debug/release build configurations with their settings
function GDWiz_AddConfig(proj, strProjectName, sdkInstallDir) {
  try {
    var config = proj.Object.Configurations('Debug');
    config.IntermediateDirectory = 'Debug';
    config.OutputDirectory = 'Debug';
    config.ConfigurationType = 2;
    config.UseOfATL = 1;
    config.CharacterSet = 1;

    var CLTool = config.Tools('VCCLCompilerTool');
    CLTool.Optimization = 0;
    CLTool.AdditionalIncludeDirectories = sdkInstallDir + "\\api\\samples\\common";
    CLTool.PreprocessorDefinitions = "WIN32;_WINDOWS;_DEBUG;_USRDLL";
    CLTool.BasicRuntimeChecks = 3;
    CLTool.RuntimeLibrary = 3;
    CLTool.DebugInformationFormat = 4;

    var LinkTool = config.Tools('VCLinkerTool');
    LinkTool.ModuleDefinitionFile = "$(ProjectName).def";

    var MidlTool = config.Tools('VCMidlTool');
    MidlTool.TypeLibraryName = "$(ProjectName).tlb";
    MidlTool.HeaderFileName = "$(InputName).h"

    config = proj.Object.Configurations('Release');
    config.IntermediateDirectory = 'Release';
    config.OutputDirectory = 'Release';
    config.ConfigurationType = 2;
    config.UseOfATL = 1;
    config.CharacterSet = 1;

    var CLTool = config.Tools('VCCLCompilerTool');
    CLTool.AdditionalIncludeDirectories = sdkInstallDir + "\\api\\samples\\common";
    CLTool.PreprocessorDefinitions = "WIN32;_WINDOWS;NDEBUG;_USRDLL";
    CLTool.RuntimeLibrary = 2;
    
    var LinkTool = config.Tools('VCLinkerTool');
    LinkTool.ModuleDefinitionFile = "$(ProjectName).def";

    var MidlTool = config.Tools('VCMidlTool');
    MidlTool.TypeLibraryName = "$(ProjectName).tlb";
    MidlTool.HeaderFileName = "$(InputName).h"

  } catch(e) {
    throw e;
  }
}

function GDWiz_PchSettings(proj) {
  SetCommonPchSettings(proj); // call function in common.js to do default stuff
}

function DelFile(fso, strWizTempFile) {
  DeleteFile(fso, strWizTempFile);// call function in common.js to do default stuff
}

function GDWiz_CreateCustomInfFile() {
  try {
    var fso, TemplatesFolder, TemplateFiles, strTemplate;
    fso = new ActiveXObject('Scripting.FileSystemObject');

    var TemporaryFolder = 2;
    var tfolder = fso.GetSpecialFolder(TemporaryFolder);
    var strTempFolder = tfolder.Drive + '\\' + tfolder.Name;

    var strWizTempFile = strTempFolder + "\\" + fso.GetTempName();

    var strTemplatePath = wizard.FindSymbol('TEMPLATES_PATH');
    var strInfFile = strTemplatePath + '\\Templates.inf';
    wizard.RenderTemplate(strInfFile, strWizTempFile);

    var WizTempFile = fso.GetFile(strWizTempFile);
    return WizTempFile;
  } catch(e) {
    throw e;
  }
}

// For a given file in the project template, returns the name of the file
// that should be created in the new project.
function GDWiz_GetTargetName(strName, strProjectName) {
  try {
    var strTarget = strName;

    if (strName == 'readme.txt')
      strTarget = 'ReadMe.txt';
    if (strName == 'sample.txt')
      strTarget = 'Sample.txt';
    if (strName == 'project_name.def')
      strTarget = strProjectName + '.def';
    if (strName == 'project_name.idl')
      strTarget = strProjectName + '.idl';
    if (strName == 'project_name.rc')
      strTarget = strProjectName + '.rc';
    return strTarget; 
  } catch(e) {
    throw e;
  }
}

// Adds the files in the template to the new project, selectively skipping some
// of them depending on the chosen wizard options.
function GDWiz_AddFilesToCustomProj(proj, strProjectName, strProjectPath, InfFile,
    usePropertyPage1, usePropertyPage2, usePropertyPage3, customDetailsView) {
  try {
    var projItems = proj.ProjectItems;

    var strTemplatePath = wizard.FindSymbol('TEMPLATES_PATH');

    var strTpl = '';
    var strName = '';

    var fso = new ActiveXObject("Scripting.FileSystemObject");
    var strTextStream = InfFile.OpenAsTextStream(1, -2);
    while (!strTextStream.AtEndOfStream) {
      strTpl = strTextStream.ReadLine();
      if (strTpl != '') {
        if ((strTpl != "PropertyPage.rgs" || usePropertyPage1) &&
            (strTpl != "PropertyPage2.rgs" || usePropertyPage2) &&
            (strTpl != "PropertyPage3.rgs" || usePropertyPage3) &&
            (strTpl != "PropertyPages.cpp" || usePropertyPage1) &&
            (strTpl != "PropertyPages.h" || usePropertyPage1) &&
            (strTpl != "DetailsView.cpp" || customDetailsView) &&
            (strTpl != "DetailsView.h" || customDetailsView) &&
            (strTpl != "DetailsView.rgs" || customDetailsView)) {
          strName = strTpl;
          var strTarget = GDWiz_GetTargetName(strName, strProjectName);
          var strTemplate = strTemplatePath + '\\' + strTpl;
          var strFile = strProjectPath + '\\' + strTarget;

          //"true" below will only copy the file from strTemplate to strTarget
          // without rendering/adding to the project
          var bCopyOnly = false;  
          
          var strExt = strName.substr(strName.lastIndexOf("."));
          if(strExt==".bmp" || strExt==".ico" || strExt==".gif" || strExt==".rtf" || strExt==".css")
            bCopyOnly = true;
          wizard.RenderTemplate(strTemplate, strFile, bCopyOnly);
          var projFile = projItems.AddFromFile(strFile);
          
          if (strName == "Plugin.cpp") {
            // The main plugin file, open it by default after the project is created
            projFile.Open(vsViewKindPrimary);
          }
        }
      }
    }
    strTextStream.Close();
    
  } catch(e) {
    throw e;
  }
}
